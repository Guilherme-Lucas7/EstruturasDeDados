Uma árvore binária é uma estrutura de dados fundamental na ciência da computação. Ela consiste em nós interligados, onde cada nó possui, no máximo, 
dois filhos: um à esquerda e outro à direita. 
Essa estrutura é amplamente utilizada para representar hierarquias, como a organização de um diretório de arquivos, a estrutura de um site ou até mesmo a classificação 
de elementos em um jogo.

A principal característica de uma árvore binária é que cada nó pode ter até dois filhos. O nó no topo da árvore é chamado de raiz, e os nós que não possuem 
filhos são chamados de folhas. 
Os nós intermediários são chamados de nós internos.

Em uma árvore binária, a ordem dos filhos é importante. O filho à esquerda é considerado o filho menor, enquanto o filho à direita é considerado o filho maior.
Essa ordem permite que a árvore seja percorrida de forma eficiente, facilitando a busca por elementos específicos.

A implementação de uma árvore binária em Python pode ser realizada utilizando classes e objetos. Cada nó da árvore pode ser representado por uma classe, 
contendo atributos como valor e referências para os filhos esquerdo e direito.

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

Com a classe Node definida, podemos construir a árvore binária conectando os nós através das referências de filho esquerdo e filho direito. 
Podemos percorrer a árvore e inserir novos nós em posições adequadas de acordo com a ordem dos valores.

Uma vez que a árvore binária tenha sido construída, podemos realizar diversas operações de manipulação e percorrer a estrutura. 
Alguns dos principais algoritmos para percorrer uma árvore binária em Python são:

Percorrer em ordem (in-order): percorre a árvore da esquerda para a direita, visitando primeiro o filho esquerdo, depois o nó atual e por fim o filho direito.
Percorrer em pré-ordem (pre-order): percorre a árvore visitando primeiro o nó atual, depois o filho esquerdo e por fim o filho direito.
Percorrer em pós-ordem (post-order): percorre a árvore visitando primeiro o filho esquerdo, depois o filho direito e por fim o nó atual.
Esses algoritmos de percurso são úteis para realizar diversas tarefas, como busca por um determinado valor, exclusão de um nó específico ou mesmo para imprimir 
a árvore de forma ordenada.

As árvores binárias são amplamente utilizadas em diversas aplicações, desde a organização de dados em bancos de dados até a construção de algoritmos de busca eficientes.
Por exemplo, elas podem ser usadas para criar uma estrutura de busca binária, onde é possível encontrar rapidamente um elemento específico em uma coleção ordenada.

Ao trabalhar com árvores binárias em Python, é importante considerar a eficiência dos algoritmos utilizados. Por exemplo, uma árvore binária balanceada garante que a 
altura da árvore seja minimizada, o que resulta em operações mais rápidas de busca e inserção.

Em resumo, as árvores binárias em Python são estruturas de dados poderosas e versáteis. Compreender os conceitos básicos, implementar corretamente e dominar os algoritmos 
de manipulação e percurso são habilidades essenciais para qualquer desenvolvedor. Portanto, ao aprender a criar e manipular estruturas de dados em Python, a compreensão 
das árvores binárias é fundamental.

Lembre-se de praticar e explorar diferentes aplicações das árvores binárias em seus projetos para aprimorar suas habilidades de programação e solução de problemas.

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def pre_order(self, node):
        if node:
            print(node.data, end=" ")
            self.pre_order(node.left)
            self.pre_order(node.right)

# Criando a árvore
tree = BinaryTree()
tree.root = Node(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)

# Exibindo os nós na ordem pré-fixada (pré-ordem)
tree.pre_order(tree.root)


